<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Luthadel</title><link>https://rudeigerc.github.io/</link><description>Recent content on Luthadel</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><copyright>© 2020 Yuchen Cheng. This site is licensed under CC-BY-SA-4.0.</copyright><lastBuildDate>Tue, 07 Jan 2020 00:00:00 +0800</lastBuildDate><atom:link href="https://rudeigerc.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://rudeigerc.github.io/about/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0800</pubDate><guid>https://rudeigerc.github.io/about/</guid><description>Yuchen Cheng Education Shanghai Jiao Tong University Bachelor of Engineering in Software Engineering Shanghai, China Sep. 2015 - Jun. 2019 Shanghai Jiao Tong University Master of Engineering in Software Engineering Shanghai, China Sep. 2019 - Present Teaching Assistant SE232: Programming and Data Structures, Autumn 2018 SE418: Software Product Design and User Experience, Spring 2019 SE26017: Software Innovation and R&amp;amp;D Management, Spring 2019 SE417: Software Engineering Economics, Autumn 2019 Experience JD.</description></item><item><title>Naive Networking With Combine in Swift</title><link>https://rudeigerc.github.io/posts/naive_networking_with_combine_in_swift/</link><pubDate>Sat, 28 Dec 2019 21:22:51 +0800</pubDate><guid>https://rudeigerc.github.io/posts/naive_networking_with_combine_in_swift/</guid><description>Introduction Combine 和 SwiftUI 是苹果在 WWDC 2019 提出的两大新的开发框架。 The Combine framework provides a declarative Swift API for processing values over time. These values can represent many kinds of asynchronous events. Combine declares publishers to expose values that can change over time, and subscribers to receive those values from the publishers. Reactive Programming 在这里我</description></item><item><title>Cloud Native Infrastructure: Part 2 Monitoring</title><link>https://rudeigerc.github.io/posts/cloud_native_infrastructure_monitoring/</link><pubDate>Mon, 27 May 2019 22:44:05 +0800</pubDate><guid>https://rudeigerc.github.io/posts/cloud_native_infrastructure_monitoring/</guid><description>Introduction Prometheus Prometheus is an open-source systems monitoring and alerting toolkit.
Installation In docker-compose.yml:
services:prometheus:image:prom/prometheusrestart:alwaysvolumes:-./prometheus.yml:/etc/prometheus/prometheus.yml-./prometheus:/prometheusports:-9090:9090user:rootPrometheus provides a UI at :9090 by default.
Node Exporter Node Exporter is designed ad a Prometheus exporter for hardware and OS metrics exposed by *NIX kernels.
According to the documentation, it's not recommended to deploy it as a Docker container because it requires access to the host system, so you could just download the binary release version.</description></item><item><title>Cloud Native Infrastructure: Part 1 Service Discovery</title><link>https://rudeigerc.github.io/posts/cloud_native_infrastructure_service_discovery/</link><pubDate>Mon, 27 May 2019 22:23:43 +0800</pubDate><guid>https://rudeigerc.github.io/posts/cloud_native_infrastructure_service_discovery/</guid><description>Introduction Service discovery components maintain a list of service instances that are available for work within a microservice domain, which is the most important part in microservice architecture. The advantage of service discovery components is that clients do not need to know the exact position of services, what they have are just the registered name of services if they want to call or use them.
Usually, a microservice will register itself to the center of service discovery components when it was started successfully, including necessary parameters such as the unique name of service, IP address and the port bind.</description></item></channel></rss>